{
    "statement": "This is the easy version of the problem. The only difference is the constraint on\nk\nand the total sum of\nn\nand\nq\nacross all test cases. You can make hacks only if both versions of the problem are solved.\nYou are given a strip of length\n1015\nand a constant\nk\n. There are exactly\nn\ncells that contain a traffic light; each has a position\npi\nand an initial delay\ndi\nfor which\ndi<k\n. The\ni\n-th traffic light works the following way:\nit shows red at the\nl⋅k+di\n-th second, where\nl\nis an integer,\nit shows green otherwise.\nAt second\n0\n, you are initially positioned at some cell on the strip, facing the positive direction. At each second, you perform the following actions in order:\nIf the current cell contains a red traffic light, you turn around.\nMove one cell in the direction you are currently facing.\nYou are given\nq\ndifferent starting positions. For each one, determine whether you will eventually leave the strip within\n10100\nseconds.",
    "input_specification": "Each test contains multiple test cases. The first line contains the number of test cases\nt\n(\n1≤t≤500\n). The description of the test cases follows.\nThe first line of each test case contains two integers\nn\n,\nk\n(\n1≤n≤500\nand\n1≤k≤500\n) — the number of traffic lights and the length of the period.\nThe second line of each test case contains\nn\nintegers\np\n1\n,\np\n2\n,…\np\nn\n(\n1≤\np\n1\n<\np\n2\n<⋯<\np\nn\n≤\n10\n15\n) — the positions of the traffic lights.\nThe third line of each test case contains\nn\nintegers\nd\n1\n,\nd\n2\n,…\nd\nn\n(\n0≤\nd\ni\n<k\n) — the delays of the traffic lights.\nThe fourth line of each test case contains one integer\nq\n(\n1≤q≤500\n) — the number of queries.\nThe fifth line of each test case contains\nq\nintegers\na\n1\n,\na\n2\n,…,\na\nq\n(\n1≤\na\ni\n≤\n10\n15\n) — the starting positions.\nIt is guaranteed that the sum of\nn\nand\nq\nover all test cases does not exceed\n500\n.",
    "output_specification": "For each test case, output\nq\nlines. Each line should contain \"YES\" if you will eventually leave the strip and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.",
    "sample_tests": [
        {
            "input": "4\n2 2\n1 4\n1 0\n3\n1 2 3\n9 4\n1 2 3 4 5 6 7 8 9\n3 2 1 0 1 3 3 1 1\n5\n2 5 6 7 8\n4 2\n1 2 3 4\n0 0 0 0\n4\n1 2 3 4\n3 4\n1 2 3\n3 1 1\n3\n1 2 3",
            "output": "YES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES"
        }
    ],
    "note": "In the first test case, the following happens at starting positions\n1\n,\n2\n, and\n3\n:\nAnd the following in the second test case at starting position\n2\n:",
    "tags": [
        "brute force",
        "dfs and similar",
        "dp",
        "graphs",
        "implementation",
        "number theory"
    ],
    "rating": "1700"
}